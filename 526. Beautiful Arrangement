//store 0 to n in new array
//call permut function by passing new array and index=0
//Base condn : if index reaches nums.length than increment count
//Iterate from index to nums.length and swap the elemnts
//check for the condition and then if valid do a recursive call on permut function
//lastly do backtracking and reverse the swap
        

class Solution {
    int count=0;
    public int countArrangement(int n) {
        int[] nums = new int[n];
        for(int i=0;i<n;i++){
            nums[i]=i+1;
        }
        int index=0;
        permut(nums,index);
        return count;
    }
    
    public void permut(int[] nums, int index){
        if(index==nums.length){
            count++;
        }
        for(int k=index;k<nums.length;k++){
            swap(nums,k,index);
            if(nums[index]%(index+1)==0 || (index+1)%nums[index]==0){
                permut(nums,index+1);
            }
            swap(nums,k,index);
        }
    }
    public void swap(int[] nums, int k, int index){
        int temp=nums[k];
        nums[k]=nums[index];
        nums[index]=temp;
    }
}
